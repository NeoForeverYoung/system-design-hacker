# Implementing the 'rate_limiter.py' module.
# This module will connect to Redis and implement the Token-Bucket algorithm.

import time
from redis import StrictRedis
import redis
import os
from dotenv import load_dotenv


# zset version
# exist race condition?
class RateLimiter:
    def __init__(self, redis_host='localhost', redis_port=6379, capacity=10, refill_time=10):
        # Load environment variables
        load_dotenv()

        # Connect to the Redis server with credentials from environment variables
        redis_host = os.getenv('REDIS_HOST', 'localhost')
        redis_port = int(os.getenv('REDIS_PORT', 6379))
        # redis_username = os.getenv('REDIS_USERNAME')
        redis_password = os.getenv('REDIS_PASSWORD')
        try:
            self.redis = redis.StrictRedis(
                host=redis_host,
                port=redis_port,
                # username=redis_username,
                password=redis_password,
                decode_responses=True
            )
            self.redis.ping()  # Attempt to connect and perform an action to check the connection
        except redis.exceptions.ConnectionError as e:
            # Handle the connection error
            print(f"Failed to connect to Redis: {e}")
            # Depending on your application's needs, you might want to:
            # - Retry the connection
            # - Exit the program
            # - Raise the exception to be handled by the caller
            raise
        except redis.exceptions.AuthenticationError as e:
            # Handle incorrect credentials
            print(f"Authentication failed: {e}")
            raise
        self.capacity = capacity  # Maximum tokens in the bucket
        self.refill_time = refill_time  # Time to refill the bucket

    def is_request_allowed(self, client_id):
        key = f"rate_limit:{client_id}"
        now = time.time()

        # Remove old tokens
        removed = self.redis.zremrangebyscore(
            key, '-inf', now - self.refill_time)
        print(f"Removed {removed} old tokens from {key}.")

        current_tokens = self.redis.zcard(key)
        print(f"Current tokens for {key}: {current_tokens}")

        if current_tokens < self.capacity:
            # If there's room in the bucket, add a new token and allow the request
            added = self._refill_tokens(key)
            print(f"Added {added} new tokens to {key}.")
            return True
        else:
            print("No more tokens available for client:", client_id)
            # Otherwise, reject the request
            return False

    def _refill_tokens(self, key):
        # Attempt to add a token if under capacity
        current_tokens = self.redis.zcard(key)
        token_score = time.time()
        # TODO 为什么current_tokens + 1不可能重复? I think it is possible.
        added = self.redis.zadd(key, {current_tokens + 1: token_score})
        print(
            f"_refill_tokens: Attempted to add token to {key}, result: {added}")
        return added


# This RateLimiter class can be used in our HTTP server to check if a request is allowed.
# It uses sorted sets in Redis to handle the tokens efficiently and prevent race conditions.

# Next, we can move on to the client implementation.
# Please type 'next' or 'continue' to proceed with the client code.
